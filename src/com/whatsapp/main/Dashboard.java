/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.whatsapp.main;

import com.whatsapp.components.PanelMessageBubble;
import com.whatsapp.components.PanelPopupMessage;
import com.whatsapp.swing.UserListCellRenderer;
import com.whatsapp.utils.Client;
import com.whatsapp.utils.MySQLConnector;
import com.whatsapp.utils.XMLParser;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Enumeration;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JScrollBar;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import org.jdesktop.animation.timing.Animator;
import org.jdesktop.animation.timing.TimingTarget;
import org.jdesktop.animation.timing.TimingTargetAdapter;

/**
 *
 * @author Owner
 */
public class Dashboard extends javax.swing.JFrame {
    private Connection connection;
    private EmojiPicker emojiPicker;
    
    private static DefaultListModel<String> listModel;
    private Set<String> activeUserSet;
    
    private static String superuser;
    private static String receiverUsername = ""; 
    private static String senderUsername = "";
    private static String previousSelectedReceiver = "";
    
    private static String[] xmlValuesArray;
    
    private int x;
    private int y;
   
    public Dashboard(String superUser) {
        superuser = superUser;
        initComponents();
        Client.getConnection(superuser);
        Client.receiveInputFromStream(this);
        this.connection = MySQLConnector.getConnection();
        init();
    }

    private void init() { 
        listModel = new DefaultListModel<>();
        lstUsers.setModel(listModel);
        lstUsers.setCellRenderer(new UserListCellRenderer());   // a custom cell ui renderer for dashboard
             
        showMessage(PanelPopupMessage.MessageType.LOGIN, "Welcome Back " + superuser);  
        jPanel2.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerPanel1 = new com.whatsapp.components.PanelHeader();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstUsers = new javax.swing.JList<>();
        lblLogout = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        txtMessage = new com.whatsapp.swing.MyTextField();
        btnSend = new javax.swing.JButton();
        lblEmojiPicker = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pnlMessageExchange = new com.whatsapp.components.PanelMessageExchange();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        headerPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                headerPanel1MouseDragged(evt);
            }
        });
        headerPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                headerPanel1MousePressed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setToolTipText("");

        lstUsers.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        lstUsers.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "user1" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lstUsers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstUsers.setCellRenderer(null);
        lstUsers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstUsersValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstUsers);

        lblLogout.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        lblLogout.setForeground(new java.awt.Color(255, 0, 51));
        lblLogout.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLogout.setText("Logout");
        lblLogout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblLogoutMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                .addGap(4, 4, 4))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel2.setBackground(new java.awt.Color(243, 243, 243));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnSend.setBackground(new java.awt.Color(38, 211, 124));
        btnSend.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        lblEmojiPicker.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEmojiPicker.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/whatsapp/icons/smile.png"))); // NOI18N
        lblEmojiPicker.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblEmojiPickerMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblEmojiPicker, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(btnSend)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(lblEmojiPicker, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        pnlMessageExchange.setBackground(new java.awt.Color(243, 243, 243));
        jScrollPane2.setViewportView(pnlMessageExchange);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headerPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headerPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void headerPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_headerPanel1MouseDragged
        this.setLocation(evt.getXOnScreen() - x, evt.getYOnScreen() - y);
    }//GEN-LAST:event_headerPanel1MouseDragged

    private void headerPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_headerPanel1MousePressed
        x = evt.getX();
        y = evt.getY();
    }//GEN-LAST:event_headerPanel1MousePressed

    private void lblLogoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoutMouseClicked
        String sqlUpdateLogInStatus = "UPDATE users SET Logged_In = 0 WHERE Username = ?";
        PreparedStatement ps;
        
        try {
            ps = connection.prepareStatement(sqlUpdateLogInStatus);
            ps.setString(1, superuser);
            ps.execute();
            Client.endConnection();
        } catch (SQLException | InterruptedException ex) {
            ex.printStackTrace();
        }
        this.dispose();
        new Main().setVisible(true);
    }//GEN-LAST:event_lblLogoutMouseClicked

    private void lstUsersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstUsersValueChanged
        // this logic ensures that the value is set, only when the user has finished selecting 
        if(!evt.getValueIsAdjusting()) {
            receiverUsername = lstUsers.getSelectedValue();
            if(receiverUsername != null && !receiverUsername.equals(previousSelectedReceiver)) {
                System.out.println("Selected Receiver: " + receiverUsername);
                jPanel2.setVisible(true);
                pnlMessageExchange.removeAll();
                pnlMessageExchange.revalidate();
                pnlMessageExchange.repaint();
            }
        }
    }//GEN-LAST:event_lstUsersValueChanged

    private void lblEmojiPickerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblEmojiPickerMouseClicked
        if(emojiPicker == null) {
            emojiPicker = new EmojiPicker(this);
        }
        Point labelLocation = lblEmojiPicker.getLocationOnScreen();
        Dimension labelSize = lblEmojiPicker.getSize();
        emojiPicker.setLocation( labelLocation.x, labelLocation.y + labelSize.height + 10);

        emojiPicker.setVisible(!emojiPicker.isVisible());
    }//GEN-LAST:event_lblEmojiPickerMouseClicked

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        if(!txtMessage.getText().isEmpty()) {
            try {
                sendMessage(txtMessage.getText());
                txtMessage.setText("");
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        } else {
            showMessage(PanelPopupMessage.MessageType.ERROR, "enter some text");
        }
    }//GEN-LAST:event_btnSendActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard(superuser).setVisible(true);
            }
        });
    }
    
    public String getTxtMessage() {
        return txtMessage.getText();
    }
    
    public void setTxtMessage(String emoji) {
        txtMessage.setText(emoji);
    }
    
    public void showMessage(PanelPopupMessage.MessageType messageType, String message) {
        PanelPopupMessage ms = new PanelPopupMessage();
        ms.showMessage(messageType, message);
        ms.repaint();

        ms.setBounds(jPanel3.getWidth() / 2 - ms.getPreferredSize().width / 2, -30, ms.getPreferredSize().width, ms.getPreferredSize().height);

        jPanel3.add(ms, 0);
        ms.setVisible(true);
        jPanel3.revalidate();
        jPanel3.repaint();

        TimingTarget target = new TimingTargetAdapter() {
            @Override
            public void timingEvent(float fraction) {
                int targetY;
                if (ms.getShow()) {
                    targetY = (int) (10 * (1f - fraction));
                } else {
                    targetY = (int) (10 * fraction);
                }

                ms.setBounds(jPanel3.getWidth() / 2 - ms.getPreferredSize().width / 2, targetY, ms.getPreferredSize().width, ms.getPreferredSize().height);
                jPanel3.revalidate();
                jPanel3.repaint();
            }

            @Override
            public void end() {
                if (ms.getShow()) {
                    ms.setVisible(false);
                    jPanel3.remove(ms);
                    jPanel3.revalidate();
                    jPanel3.repaint();
                    ms.setShow(false);
                } else {
                    ms.setShow(true);
                }
            }
        };

        Animator animator = new Animator(400, target);
        animator.setResolution(0);
        animator.setAcceleration(0.5f);
        animator.setDeceleration(0.5f);
        animator.start();

        Timer timer = new Timer(1500, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ms.setVisible(false);
                ms.setShow(false);
                jPanel3.remove(ms);
                jPanel3.revalidate();
                jPanel3.repaint();
            }
        });
        timer.setRepeats(false);
        timer.start();
    }

    private void sendMessage(String message) throws IOException {
        Client.sendMessageToStream("MESSAGE", receiverUsername, message);
        System.out.println("To(" + receiverUsername + "): " + message);
        
        LocalTime currentTime = LocalTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
        String timestamp = currentTime.format(formatter);

        PanelMessageBubble messagePanel = new PanelMessageBubble(message, timestamp, true);

        int maxWidth = Math.min(40 + message.length() * 10, 300);
        pnlMessageExchange.add(messagePanel, "align right, wmax " + maxWidth);
        pnlMessageExchange.revalidate();
        pnlMessageExchange.repaint();
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                JScrollBar scrollBar = jScrollPane2.getVerticalScrollBar();
                scrollBar.setValue(scrollBar.getMaximum());
            }
        });
    }

    public void receiveMessage(String xmlmessage) {
        xmlValuesArray = XMLParser.parseXML(xmlmessage);
        senderUsername = xmlValuesArray[2];
        String message = xmlValuesArray[3];
        System.out.println("From(" + senderUsername + "): " + message);
        
        if(receiverUsername.equals(senderUsername)) {
            LocalTime currentTime = LocalTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
            String timestamp = currentTime.format(formatter);

            PanelMessageBubble messagePanel = new PanelMessageBubble(message, timestamp, false);

            int maxWidth = Math.min(40 + message.length() * 10, 300);
            pnlMessageExchange.add(messagePanel, "align left, wmax " + maxWidth);
            pnlMessageExchange.revalidate();
            pnlMessageExchange.repaint();
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    JScrollBar scrollBar = jScrollPane2.getVerticalScrollBar();
                    scrollBar.setValue(scrollBar.getMaximum());
                }
            });
        } else {
            System.out.println("sender does not match receiver");
        }
    }

    public void updateActiveUsers(Set<String> obj) {
        previousSelectedReceiver = lstUsers.getSelectedValue();
        
        activeUserSet = obj;
        System.out.println("Active Users: " + activeUserSet);
        listModel.clear();
        for(String username : activeUserSet) {
            if(!superuser.equals(username))
                listModel.addElement(username);
        }
        
        if (previousSelectedReceiver != null && activeUserSet.contains(previousSelectedReceiver.replace(" (You)", ""))) 
            lstUsers.setSelectedValue(previousSelectedReceiver, true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSend;
    private com.whatsapp.components.PanelHeader headerPanel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblEmojiPicker;
    private javax.swing.JLabel lblLogout;
    private javax.swing.JList<String> lstUsers;
    private com.whatsapp.components.PanelMessageExchange pnlMessageExchange;
    private com.whatsapp.swing.MyTextField txtMessage;
    // End of variables declaration//GEN-END:variables
}
